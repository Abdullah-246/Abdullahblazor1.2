@page "/LearnBlazor/bindProp"

<h2 class="text-success">Individual Product</h2>
<div cal="" row>
    <div class="col-6 broder p-3">
        <h3 class="txt-primary">Product Playground</h3><hr />
        <div>
            Active:<input type="checkbox" @bind="@Product.IsActive" check="@(Product.IsActive?"checked":null)" /><br />
        </div>
        <div>
            Price:
            <input type="number" value="@Product.Price" />
            <br />@*"value" is used for one way binding *@
            Price:
            <input type="number" @bind-value="@Product.Price" />
            <br />@*"bind-value" is used for two-way binding*@
            Price:
            <input type="number" @bind-value="@Product.Price" @bind-value:event="oninput" />
            <br />@*"bind-value:event="oninput"==== this will change the value on real time no need to click outside the box to update the value*@
            Price:
            <input type="number" @bind="@Product.Price" @bind:event="oninput" />
            <br />@*"bind" and "bind-value"== have the same affect which is two way binding*@
        </div>
        <div>
            Product Properties:
            <select @bind="selectedProp">
                @foreach (var prop in Product.ProductProperties)
                {
                    <option value="@prop.Key">@prop.Key</option>
                }
            </select>

        </div>
    </div>
    <br />
    <div class="col-6 border p-3">
        <h3 class="txt-primary">Product Summary</h3><hr />
        Name: @Product.Name<br />
        Active: @Product.IsActive<br />
        Price: @Product.Price<br />
        This product is: @(Product.IsActive ? "Active" : "InActive")<br />
        Properties selectes: @selectedProp<br />
        @if (!string.IsNullOrWhiteSpace(selectedProp))
        {
            <p>Property Value: @Product.ProductProperties.FirstOrDefault(u => u.Key == selectedProp).Value</p>
        }
    </div>
<div class="col-12 pt-4">
    <h2 class="text-primary">Product Table</h2>
    <table class="table table-striped">
        <tbody>
            @foreach(var prod in Products)
            {
                 <tr>
                     <td>
                         <input type="text" @bind="prod.Name" @bind:event="oninput"/>
                     </td>
                    <td>
                            <input type="text" @bind="prod.Price" checked="@(prod.IsActive?"checked":null)" @bind:event="oninput" />
                    </td>
                     <td>
                         <input type="checkbox" @bind="prod.IsActive" @bind:event="oninput" />
                     </td>
                 </tr>   
            }
        </tbody>
    </table>

    <h2>Product Summary</h2>
    @foreach(var prod in Products)
            {
                <p>@prod.Name [@prod.Price] is @(prod.IsActive?"Active":"InActive")</p> 
            }
</div>
</div>

@code {
    private string selectedProp = "";
    Demo_Product Product = new()
        {
            Id = 1,
            Name = "Rose Candle",
            IsActive = true,
            Price = 10.99,
            ProductProperties = new List<Demo_ProductProp>()
            {
                new Abdullah_Models.LearnBlazorModels.Demo_ProductProp { Id = 1, Key = "Color", Value = "Black" },
                new Demo_ProductProp { Id = 2, Key = "Flavor", Value = "Rose Jasmine" },
                new Demo_ProductProp { Id = 3, Key = "Size", Value = "20oz" }
            }
        };
    List<Demo_ProductProp> Products = new();

    protected override void OnInitialized() 
    {
        Products = new List<Demo_ProductProp>();
        Products.Add(new()
            {
                Id = 1,
                Name = "Midnight Blaze",
                IsActive = false,
                Price=13.99,
                ProductProperties = new()
                {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Rose"},
                     new Demo_ProductProp { Id = 2, Key = "Size", Value = "20oz"},
                    new Demo_ProductProp { Id = 3, Key = "Color", Value="Purple" }
                }
            });

        Products.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price=10.99,
            ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Lily" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "18oz" },
                new Demo_ProductProp {Id = 3,Key = "Color",Value = "White"}
            }
        });
}
}   

